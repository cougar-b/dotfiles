" 1.1 (created: 2008/06/03 19:37:22)
" vim: set ft=vimperator:

" config
set! network.dns.disableIPv6=true

" keymap
nnoremap J 5<C-e>
nnoremap K 5<C-y>
nnoremap h gT
nnoremap l gt
nnoremap <C-q> <C-z>
nnoremap ,s :source ~/.vimperatorrc<CR>
nnoremap <C-r> :restart<CR>
nnoremap <M-c> Y
nnoremap <M-q> <Nop>
nnoremap <C-t> <M-F>
nnoremap ,c :<C-u>copy anchor<CR>
nnoremap ,t :<C-u>copy %TITLE% %URL%<CR>

set nextpattern=次[のへ],\bnext\b,\bmore\b,^next.*,^>$,^>>$
set previouspattern=前[のへ],\bprev\b,\bprevious\b,^prev.*,^<$,^<<$

" my search commands
nnoremap sg :google<Space>
nnoremap si :googleimage<Space>
nnoremap se :eijiro<Space>
nnoremap sb :blogsearch<Space>
nnoremap st :twittersearch<Space>
nnoremap sh :hoogle<Space>
nnoremap sc :googlecode<Space>
nnoremap sk :<C-u>tabopen http://twitter.com/
nnoremap sp :<C-u>tabopen http://acm.pku.edu.cn/JudgeOnline/problem?id=
command! -nargs=+ Unicodemotion tabopen http://fuba.moaningnerds.org/unicodemoticon/?<args>
nnoremap sm :Unicodemotion<Space>
command! -nargs=+ Rlo tabopen http://fuba.moaningnerds.org/conv/rlo.cgi?<args>
command! ldr javascript liberator.open('http://reader.livedoor.com/subscribe/' + buffer.URI)
cnoremap <C-j> <Nop>
cnoremap <C-h> <BS>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-i> <Tab>
inoremap <C-m> <CR>

set complete& complete+=t

" migemo_hint.js
set hintmatching=custom

" feedSomeKey_2.js
autocmd LocationChange .* fmapc
" Google Reader
autocmd LocationChange www\.google\.(co\.jp|com)/reader :fmap! -vkey j k n p m s t v a A r S N P X O gh ga gs gt gu u / ?
" Fast ladder
autocmd LocationChange reader\.livedoor\.com/reader :fmap a s j k ? p o w c < > v r
" Tumblr, Google
autocmd LocationChange www\.(google|tumblr)\.com :fmap j k o
" GMail
autocmd LocationChange mail\.google\.com/mail :fmap! j k n p o x u s e ? g i #
" quick switch
nnoremap <silent> e :fmap j k o<CR>
nnoremap <silent> E :fmapc<CR>

nnoremap ; :
nnoremap \' ;

" hatena bookmark
javascript if (typeof hBookmark != 'undefined') liberator.loadScript('chrome://hatenabookmark/content/vimperator/plugin/hatenabookmark.js', {__proto__: this});

command! GBkmk javascript liberator.open('http://www.google.com/bookmarks/mark?op=add&title=' + encodeURIComponent(buffer.title) + '&bkmk=' + encodeURIComponent(buffer.URI), liberator.NEW_TAB)
nnoremap sa :GBkmk<CR>

" multi_requester.js
nnoremap m <Nop>
nnoremap ma :<C-u>mr<Space>alc<Space>

" refcontrol.js
let g:refcontrol_enabled = "true"
javascript <<EOM
liberator.globalVariables.refcontrol = {
  '@DEFAULT': '@NORMAL',
  'fc2.com': '@FORGE',
  'nagamochi.info': '@FORGE'
};
EOM

javascript <<EOM
commands.addUserCommand(['matrixcode'], '',
  function(args) {
    var $LX = plugins.libly.$U.getFirstNodeFromXPath;
    var $LXs = plugins.libly.$U.getNodesFromXPath;
    $LXs('//th[@align="left"]').slice(2).forEach(function(t) {
      var x = t.innerHTML;
      $LX('../td/input', t).value = liberator.globalVariables.matrix_code[x[1]][x[3]-1];
    });
    $LX('//input[@type="submit"]').click();
  }, null, true);
EOM

nnoremap ,l :<C-u>matrixcode<CR>

autocmd LocationChange .* set focuscontent
autocmd LocationChange member\.livedoor\.com/login set nofocuscontent

javascript <<EOM
commands.addUserCommand(['inreplyto'], '',
    function(args) {
      var a = plugins.libly.$U.getFirstNodeFromXPath('//span[contains(@class,"entry-meta")]/a[2]');
      if (a) {
        liberator.open(a.href);
      }
    }, null, true);
EOM

nnoremap qr :<C-u>tombloo ReBlog\ -\ Tumblr<CR>

" hint-tombloo.js
let g:hint_tombloo_key = 'r'

" loginManager.js
javascript <<EOM
liberator.globalVariables.userLoginServices = {
  livedoor: {
    HOST: ["https://member.livedoor.com", "http://member.livedoor.com"],
    LOGIN: "/login/index",
    LOGOUT: "/login/logout",
    usernameField: "livedoor_id",
    passwordField: "password",
  },
};
EOM

javascript <<EOM
commands.addUserCommand(['pixivBookmark'], 'pixiv bookmark',
    function(args) {
      if (/www\.pixiv\.net\/member_illust\.php\?.*illust_id=\d+/.exec(buffer.URI) === null) {
        liberator.echoerr('not a pixiv illust page');
        return;
      }
      let params = {
        mode: 'add',
        tt: liberator.plugins.libly.$U.getFirstNodeFromXPath('//input[@name="tt"]').value,
        id: /illust_id=(\d+)/.exec(buffer.URI)[1],
        type: 'illust',
        restrict: '0',
        tag: args.map(function(t) encodeURIComponent(t)).join('+'),
        comment: '',
      };
      let q = [k + '=' + params[k] for (k in params)].join('&');

      let req = new liberator.plugins.libly.Request('http://www.pixiv.net/bookmark_add.php', null, {postBody: q});
      req.addEventListener('onSuccess', function(res) {
        let m = /<strong class="link_visited">\[ <a href="[^"]+">(.+?)<\/a> \]<\/strong>(.+?)<br \/>/.exec(res.responseText);
        liberator.echo('[' + m[1] + ']' + m[2]);
      });
      req.post();
    },
    {
      completer: function(context, args) {
        let libly = liberator.plugins.libly;
        let $U = libly.$U;

        let id = /illust_id=(\d+)/.exec(buffer.URI)[1];
        let req = new libly.Request('http://www.pixiv.net/bookmark_add.php?type=illust&illust_id=' + id);
        req.addEventListener('onSuccess', function(res) {
          let cnt = window.content;
          let doc = cnt.document.implementation.createDocument(
            'http://www.w3.org/1999/xhtml',
            'html',
            cnt.document.implementation.createDocumentType(
              'html',
              '-//W3C//DTD HTML 4.01//EN',
              'http://www.w3.org/TR/html4/strict.dtd'));
          let range = cnt.document.createRange();
          range.selectNodeContents(cnt.document.documentElement);
          let content = doc.adoptNode(range.createContextualFragment(res.responseText));
          doc.documentElement.appendChild(content);

          let tags = [];
          let div = doc.getElementsByClassName('bookmark_add_area');
          [div[0], div[1]].forEach(function(e) {
            let as = e.getElementsByTagName('a');
            for each(a in as) {
              let onclick = a.getAttribute('onclick');
              let m = /'([^']+)'/.exec(onclick);
              tags.push(decodeURI(m[1]));
            }
          });

          context.title = ['tag'];
          context.completions = [[t, ''] for each(t in tags)];
          //tags.forEach(function(t) liberator.echo(t));
        });
        req.get();
      },
      literal: -1,
    },
    true);
EOM

javascript <<EOM
/*
  http://vimperator.g.hatena.ne.jp/nokturnalmortum/20100128/1264675483
  http://code.google.com/p/vimperator-labs/source/detail?r=c61fb6b0248a51d103d66a24eca6162ddb96902f
  http://code.google.com/p/vimperator-labs/source/detail?r=0e37f641edc2fbed0da05201113f711b2eb88a19
*/
let pixivBookmarkUser = function(id) {
  let libly = liberator.plugins.libly;

  let req = new libly.Request('http://www.pixiv.net/bookmark_add.php?type=user&id=' + id, null, {id: id});
  req.addEventListener('onSuccess', function(res) {
    let m = /name="tt" *value="([^"]+)"/.exec(res.responseText);
    if (m === null) {
      let m = /<a href="member\.php\?id=\d+">([^<]+)<\/a>([^<]+)<\/div>/.exec(res.responseText);
      liberator.echo(m[1] + m[2]);
      return;
    }
    let tt = m[1];
    let params = {
      mode: 'add',
      tt: tt,
      id: res.req.options.id,
      type: 'user',
      restrict: '0',
    };
    let q = [k + '=' + params[k] for (k in params)].join('&');
    let req = new libly.Request('http://www.pixiv.net/bookmark_add.php', null, {postBody: q});
    req.addEventListener('onSuccess', function(res) {
      let m = /<a href="member\.php\?id=\d+">([^<]+)<\/a>([^<]+)/.exec(res.responseText);
      liberator.echo(m[1] + m[2]);
    });
    req.post();
  });
  req.get();
};

mappings.addUserMap([modes.NORMAL], ['i'], '',
    function() liberator.execute(':inreplyto'),
    { matchingUrls: /twitter\.com\/[A-Za-z0-9_]+\/status/ });

mappings.addUserMap([modes.NORMAL], ['i'], '',
    function() liberator.execute(':tombloo ReBlog\\ -\\ Tumblr'),
    { matchingUrls: /[a-z0-9]+\.tumblr\.com\/post\// });

mappings.addUserMap([modes.NORMAL], ['B'], '',
    function() {
      let id = liberator.plugins.libly.$U.getFirstNodeFromXPath('id("rpc_u_id")').innerHTML;
      pixivBookmarkUser(id);
    },
    { matchingUrls: /www\.pixiv\.net\/member_illust\.php\?mode=medium&illust_id=\d+/ });
mappings.addUserMap([modes.NORMAL], ['i'], '',
    function() liberator.execute(':xhint o //a[contains(@href, "mode=big")]'),
    { matchingUrls: /www\.pixiv\.net\/member_illust\.php\?mode=medium&illust_id=\d+/ });
mappings.addUserMap([modes.NORMAL], ['i'], '',
    function() {
      let e = document.createEvent('MouseEvent');
      // https://developer.mozilla.org/en/DOM/event.initMouseEvent
      e.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
      let a = plugins.libly.$U.getFirstNodeFromXPath('//a[contains(@href, "mode=") and not(contains(@href, "mode=medium"))]');
      a.dispatchEvent(e);
    },
    { matchingUrls: /www\.pixiv\.net\/member_illust\.php\?mode=medium&illust_id=\d+/ });
mappings.addUserMap([modes.NORMAL], ['B'], '',
    function() {
      let id = /id=(\d+)/.exec(buffer.URI)[1];
      pixivBookmarkUser(id);
    },
    { matchingUrls: /www\.pixiv\.net\/member(?:_illust)?\.php\?id=\d+/ });
mappings.addUserMap([modes.NORMAL], ['b'], '',
    function() liberator.plugins.libly.$U.getFirstNodeFromXPath('//input[contains(@value,"追加する")]').click(),
    { matchingUrls: /www\.pixiv\.net\/bookmark_add\.php\?.*type=user/ });
mappings.addUserMap([modes.NORMAL], ['b'], '',
    function() liberator.plugins.libly.$U.getFirstNodeFromXPath('id("bookmark_submit_btn")').click(),
    { matchingUrls: /www\.pixiv\.net\/bookmark_add\.php\?.*type=illust/ });
mappings.addUserMap([modes.NORMAL], ['t'], '',
    function() liberator.execute(':xhint o //*[@class=""]'),
    { matchingUrls: /www\.pixiv\.net\/bookmark_add\.php\?.*type=illust/ });
mappings.addUserMap([modes.NORMAL], ['T'], '',
    function() liberator.execute(':xhint o //*[@class="on"]'),
    { matchingUrls: /www\.pixiv\.net\/bookmark_add\.php\?.*type=illust/ });

mappings.addUserMap([modes.NORMAL], ['x'], '',
    function() liberator.execute(':stseek! -5'),
    { matchingUrls: /www\.(youtube\.com|nicovideo\.jp)\/watch/ });
mappings.addUserMap([modes.NORMAL], ['X'], '',
    function() liberator.execute(':stseek! -10'),
    { matchingUrls: /www\.(youtube\.com|nicovideo\.jp)\/watch/ });
mappings.addUserMap([modes.NORMAL], ['s'], '',
    function() liberator.execute(':stseek! +5'),
    { matchingUrls: /www\.(youtube\.com|nicovideo\.jp)\/watch/ });
mappings.addUserMap([modes.NORMAL], ['S'], '',
    function() liberator.execute(':stseek! +10'),
    { matchingUrls: /www\.(youtube\.com|nicovideo\.jp)\/watch/ });
mappings.addUserMap([modes.NORMAL], ['v'], '',
    function() liberator.execute(':stvolume! -10'),
    { matchingUrls: /www\.(youtube\.com|nicovideo\.jp)\/watch/ });
mappings.addUserMap([modes.NORMAL], ['V'], '',
    function() liberator.execute(':stvolume! +10'),
    { matchingUrls: /www\.(youtube\.com|nicovideo\.jp)\/watch/ });
mappings.addUserMap([modes.NORMAL], ['a'], '',
    function() liberator.execute(':stplay'),
    { matchingUrls: /www\.(youtube\.com|nicovideo\.jp)\/watch/ });
EOM
autocmd LocationChange www\.pixiv\.net/jump\.php :js liberator.open(buffer.URI.replace(/.*jump\.php\?(.+)$/, '$1'))

javascript <<EOM
commands.addUserCommand(['rmframe'], '',
    function(args) {
      if (buffer.URI.match(/ow\.ly/)) {
        var xpath = 'id("tools")/a[contains(@class, "close")]';
      } else if (buffer.URI.match(/am6\.jp/)) {
        var xpath = 'id("navBar")/a[contains(@class, "right")]';
      } else {
        liberator.echoerr('removeframe: unknown site: ' + buffer.URI);
        return false;
      }
      liberator.open(plugins.libly.$U.getFirstNodeFromXPath(xpath).href);
    }, null, true);
EOM
nnoremap ,r :<C-u>rmframe<CR>

source ~/.private.vimperatorrc

