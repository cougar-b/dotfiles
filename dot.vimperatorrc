" vim: set ft=vimperator fdm=marker:

autocmd!

set toolbars=none,navigation
set focuscontent
set complete=tl
set hintmatching=contains
set hintchars=HJKLASDFG
set hlsearch
set yankencodedurl
set showstatuslinks=3

nnoremap J 5<C-e>
nnoremap K 5<C-y>
nnoremap h gT
nnoremap l gt
nnoremap <C-r> :<C-u>restart<CR>
nnoremap ,f :<C-u>set fullscreen!<CR>
nnoremap ,c :<C-u>copy anchor<CR>
nnoremap ,t :<C-u>copy %TITLE% %URL%<CR>
nnoremap ; :
nnoremap \' ;
nnoremap w <Nop>
javascript <<EOM
mappings.addUserMap([modes.NORMAL], [',s'], 'reload rc file', function() io.source(io.getRCFile().path));
EOM
nnoremap <C-k> <Nop>
nnoremap <C-j> <Nop>

cnoremap <C-p> <Up>
cnoremap <C-f> <Right>
cnoremap <C-b> <Left>
cnoremap <C-n> <Down>
cnoremap <C-i> <Tab>

inoremap <C-p> <Up>
inoremap <C-f> <Right>
inoremap <C-b> <Left>
inoremap <C-n> <Down>

javascript <<EOM
if (liberator.has('MacUnix')) {
  liberator.execute('cnoremap <C-j> <Nop>');  // AquaSKK
} else {
  liberator.execute('cnoremap <C-e> <End>');
  liberator.execute('cnoremap <C-a> <Home>');

  liberator.execute('inoremap <C-e> <End>');
  liberator.execute('inoremap <C-a> <Home>');
}
EOM

javascript <<EOM
[['Google', 'https://www.google.com/search?q=%s', 'gs'],
 ['Google Images', 'https://www.google.com/search?q=%s&tbm=isch', 'gi'],
 ['Twitter', 'https://twitter.com/%s/with_replies', 'tw'],
 ['POJ', 'http://poj.org/problem?id=%s', 'poj'],
 ['alc', 'http://eow.alc.co.jp/search?q=%s', 'alc'],
].forEach(function (b) {
  if (!bookmarks.isBookmarked(b[1])) {
    bookmarks.add(false, b[0], b[1], b[2], ['vimp'], false);
  }
});
EOM
nnoremap sg :<C-u>tabopen gs<Space>
nnoremap si :<C-u>tabopen gi<Space>
nnoremap sk :<C-u>tabopen tw<Space>
nnoremap sp :<C-u>tabopen poj<Space>
nnoremap sa :<C-u>tabopen alc<Space>

javascript <<EOM
liberator.globalVariables.plugin_loader_roots = [
  '~/.ghq/github.com/vimpr/vimperator-plugins',
  '~/.ghq/github.com/eagletmt/misc/vimperator',
];
liberator.globalVariables.plugin_loader_plugins = [
  // vimpr/vimperator-plugins
  'feedSomeKeys_3',
  'slideshare',
  'walk-input',

  // eagletmt/misc/vimperator
  'pixiv_bookmark',
  'speakerdeck',
  'cookie-permission',
  'lastpass',
];
EOM

command! -nargs=+ lazy autocmd VimperatorEnter .* <args>

lazy fmaps -u='mail\.google\.com/mail' c / j k n p o u e x s r a # [ ] ? gi gs gt gd ga gc
lazy fmaps -u='mail\.google\.com/mail/.*/[0-9a-f]+$' c / j,n k,p n,j p,k o u e x s r a # [ ] ? gi gs gt gd ga gc -
lazy fmaps -u='(fastladder|livedoor|livedwango)\.com/reader' j k e,s a p o v c i,p <Space> <S-Space> w n,w
lazy fmaps -u='fl\.wanko\.cc/reader' j k e,s a p o v c i,p <Space> <S-Space> w n,w
lazy fmaps -u='www\.pixiv\.net/member_illust\.php\?.*mode=manga' -events=vkeydown j k v z b
lazy fmaps -u='www\.pixiv\.net/member_illust\.php\?.*mode=medium' -events=vkeydown b v f

javascript <<EOM
(function() {
  function removeHatenaKeywordLinks() {
    for (let [_, a] in Iterator(content.document.querySelectorAll('a.keyword'))) {
      let span = content.document.createElement('span');
      for (let [_, n] in Iterator(a.childNodes)) {
        console.log(n);
        span.appendChild(n);
      }
      a.parentNode.replaceChild(span, a);
    }
  }

  commands.addUserCommand(['removeHatenaKeywordLinks'], 'Remove Hatena keyword links', removeHatenaKeywordLinks, { argCount: 0 }, true);

  function hatebu() {
    liberator.open('http://b.hatena.ne.jp/entry/' + buffer.URI);
  }
  commands.addUserCommand(['hatebu'], 'Visit hatebu page', hatebu, { argCount: 0 }, true);
})();
EOM

nnoremap -urls='www\.pixiv\.net/' wb :<C-u>pixivBookmark<Space>

nnoremap -urls='speakerdeck\.com/' w :<C-u>speakerdeck next<CR>
nnoremap -urls='speakerdeck\.com/' W :<C-u>speakerdeck prev<CR>

nnoremap -urls='www\.slideshare\.net/' w :<C-u>slideshare next<CR>
nnoremap -urls='www\.slideshare\.net/' W :<C-u>slideshare prev<CR>

let g:hint_tombloo_key = 'r'

javascript <<EOM
commands.addUserCommand(['cleanAmazonUrl'], 'Clean Amazon URL', function(args) {
  let doc = content.document;
  // ASIN.0 in kindle store
  let asin = doc.getElementById("ASIN") || doc.getElementsByName("ASIN.0")[0];
  if (asin) {
    content.window.history.replaceState(null, "Amazon URL Cleaner", "/dp/" + asin.value + "/");
  }
}, { argCount: 0 }, true);
EOM
nnoremap -urls='www\.amazon\.co\.jp/' w :<C-u>cleanAmazonUrl<CR>

javascript <<EOM
commands.addUserCommand(['ldr'], 'Subscribe on LDR', function() {
  liberator.open('http://reader.livedoor.com/subscribe/' + buffer.URI);
}, { argCount: 0 }, true);
EOM

javascript <<EOM
commands.addUserCommand(['canonical'], 'Go to canonical URL', function() {
  let link = content.document.querySelector('link[rel=canonical]');
  if (link) {
    content.window.history.replaceState(null, '', link.href);
  } else {
    liberator.echoerr('No canonical URL');
  }
}, { argCount: 0 }, true);
EOM

javascript <<EOM
commands.addUserCommand(['pojstatus'], 'Switch to POJ status', function() {
  let id = content.window.location.search.match(/id=(\d+)/)[1];
  liberator.open(content.window.location.origin + '/status?problem_id=' + id);
}, { argCount: 0 }, true);
EOM
nnoremap -urls='poj\.org/problem\?' w :<C-u>pojstatus<CR>

style -name poj poj.org <<CSS
.ptx {
  font-family: sans-serif !important;
}
CSS

javascript <<EOM
window.saveCanvas = function(canvas, path) {
  let file = Cc['@mozilla.org/file/local;1'].createInstance(Ci.nsILocalFile);
  file.initWithPath(path);

  let io = Cc['@mozilla.org/network/io-service;1'].getService(Ci.nsIIOService);
  let source = io.newURI(canvas.toDataURL('image/png', ''), 'UTF8', null);
  let target = io.newFileURI(file);

  let persist = Cc['@mozilla.org/embedding/browser/nsWebBrowserPersist;1'].createInstance(Ci.nsIWebBrowserPersist);
  //persist.persistFlags = Ci.nsIWebBrowserPersist.PERSIST_FLAG_REPLACE_EXISTING_FILES;
  //persist.persistFlags |= Ci.nsIWebBrowserPersist.PERSIST_FLAG_AUTODETECT_APPLY_CONVERSION;

  persist.saveURI(source, null, null, null, null, file, file.privacyContext);
};
EOM
